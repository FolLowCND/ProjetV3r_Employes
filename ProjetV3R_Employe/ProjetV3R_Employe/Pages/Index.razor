@page "/"
@using ProjetV3R_Employe.Data.Models
@using ProjetV3R_Employe.Data.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<h3>Connexion</h3>

@if (isLoading)
{
    <p>Connexion en cours...</p>
}
else
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color: red;">@errorMessage</p>
    }

    <EditForm Model="user" OnValidSubmit="Login">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email :</label>
            <InputText class="form-control" @bind-Value="user.Email" />
        </div>

        <button class="btn btn-primary" type="submit" disabled="@isLoading">Connexion</button>
    </EditForm>
}

@code {
    private User user = new User();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Rediriger si déjà connecté
            Navigation.NavigateTo("/gestion-fournisseurs");
        }
    }

    private async Task Login()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var loginRequest = new { Email = user.Email }; // Créer un objet conforme à LoginRequest
            var response = await Http.PostAsJsonAsync("api/auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result != null)
                {
                    var role = result.Role;

                    Console.WriteLine($"[Login] Connexion réussie pour le rôle : {role}");

                    switch (role)
                    {
                        case "Administrateur":
                        case "Tenant-Admin":
                            Navigation.NavigateTo("/gestion-employes", forceLoad: true);
                            break;
                        case "Employé":
                            Navigation.NavigateTo("/gestion-fournisseurs", forceLoad: true);
                            break;
                        default:
                            errorMessage = "Rôle inconnu ou non autorisé.";
                            break;
                    }
                }
                else
                {
                    errorMessage = "Réponse inattendue du serveur.";
                }
            }
            else
            {
                errorMessage = "Échec de la connexion. " + await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de la connexion : {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
