@page "/gestion-employes"
@using ProjetV3R_Employe.Data.Models
@using ProjetV3R_Employe.Shared.ComposantsGestionEmploye
@inject EmployeService EmployeService
@inject NavigationManager Navigation


@*@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@attribute [Authorize(Roles = "Administrateur")]
@inject AuthenticationStateProvider AuthStateProvider
@inject CustomAuthenticationStateProvider CustomAuthProvider*@


@*<AuthorizeView Roles="Administrateur">*@

    <h3>Gestion des employés</h3>

    <button OnEmployeModifie="RafraichirListe" @onclick="AfficherFormulaireAjout">Ajouter un employé</button>

    @if (afficherFormulaireAjout)
    {
        <CompAjoutEmploye OnEmployeAjoute="FermerFormulaireAjout" />
    }

    <CompListeEmploye OnModifier="AfficherFormulaireModification" OnSupprimer="AfficherPopupSuppression" />

    @if (employeSelectionnePourModification != null)
    {
        <CompModifEmploye Employe="employeSelectionnePourModification" OnModificationTerminee="ReinitialiserFormulaires" />
    }

    @if (afficherPopupSuppression && employeSelectionnePourSuppression != null)
    {
        <div class="popup-suppression">
            <p>Voulez-vous vraiment supprimer l'employé : @employeSelectionnePourSuppression.Email ?</p>
            <button OnEmployeModifie="RafraichirListe" @onclick="ConfirmerSuppression">Confirmer</button>
            <button OnEmployeModifie="RafraichirListe" @onclick="AnnulerSuppression">Annuler</button>
        </div>
    }





@*</AuthorizeView>*@

@code {
    private bool isAuthorized = false;
    private string? role;
    private string? email;

    private bool afficherFormulaireAjout = false;
    private User employeSelectionnePourModification;
    private User employeSelectionnePourSuppression;
    private bool afficherPopupSuppression = false;
    private CompListeEmploye listeEmploye;

    //protected override async Task OnInitializedAsync()
    //{
    //    var authState = await CustomAuthProvider.GetAuthenticationStateAsync();
    //    var user = authState.User;

    //    Console.WriteLine($"[GESTION EMPLOYE]Utilisateur authentifié : {user.Identity?.Name}, Rôle : {role}");

    //    user = authState.User;

    //    foreach (var claim in user.Claims)
    //    {
    //        Console.WriteLine($"Claim: {claim.Type}, Value: {claim.Value}");
    //    }

    //    if (user.Identity?.IsAuthenticated == true)
    //    {
    //        role = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
    //        email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;

    //        if (role == "Administrateur" || role == "Tenant-Admin")
    //        {
    //            isAuthorized = true;
    //        }
    //        else
    //        {
    //            Navigation.NavigateTo("/access-denied", forceLoad: true);
    //            Console.WriteLine($"[GESTION EMPLOYE]Utilisateur non autorisé : {user.Identity?.Name}, Rôle : {role} }");
    //        }
    //    }
    //    else
    //    {
    //        Navigation.NavigateTo("/", forceLoad: true);
    //        Console.WriteLine($"[GESTION EMPLOYE]Utilisateur non authentifié.");
    //    }
    //}


    private void AfficherFormulaireAjout()
    {
        afficherFormulaireAjout = !afficherFormulaireAjout;
        employeSelectionnePourModification = null;
        employeSelectionnePourSuppression = null;
    }

    // Méthode appelée lorsque l'ajout est terminé
    private void FermerFormulaireAjout()
    {
        afficherFormulaireAjout = false;
    }

    // Méthode pour afficher le formulaire de modification
    private void AfficherFormulaireModification(User employe)
    {
        employeSelectionnePourModification = employe;
        employeSelectionnePourSuppression = null;
        afficherFormulaireAjout = false;
    }

    // Méthode pour afficher la popup de suppression
    private void AfficherPopupSuppression(User employe)
    {
        employeSelectionnePourSuppression = employe;
        afficherPopupSuppression = true;
    }

    // Confirme la suppression de l'employé
    private async Task ConfirmerSuppression()
    {
        if (employeSelectionnePourSuppression != null)
        {
            await EmployeService.SupprimerEmployeAsync(employeSelectionnePourSuppression.Id);
        }
        ReinitialiserFormulaires();
    }

    // Annule la suppression
    private void AnnulerSuppression()
    {
        afficherPopupSuppression = false;
        employeSelectionnePourSuppression = null;
    }

    // Réinitialise tous les formulaires
    private void ReinitialiserFormulaires()
    {
        employeSelectionnePourModification = null;
        employeSelectionnePourSuppression = null;
        afficherFormulaireAjout = false;
        afficherPopupSuppression = false;
    }

    private void RafraichirListe()
    {
        employeSelectionnePourModification = null;
        StateHasChanged();
    }

}