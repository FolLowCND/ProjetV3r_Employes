@using ProjetV3R_Employe.Data.Models
@using ProjetV3R_Employe.Shared.ComposantsGestionEmploye
@inject EmployeService EmployeService

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <p style="color: green;">@successMessage</p>
}

<EditForm Model="nouvelEmploye" OnValidSubmit="AjouterEmploye">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="nouvelEmploye.Email" />
        <ValidationMessage For="@(() => nouvelEmploye.Email)" />
    </div>
    <div class="form-group">
        <label>Rôle</label>
        <InputSelect class="form-control" @bind-Value="nouvelEmploye.Role">
            @if (roles != null && roles.Any())
            {
                @foreach (var role in roles)
                {
                    <option value="@role.IdRole">@role.NomRole</option>
                }
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Enregistrer</button>
</EditForm>

@code {
    private CompListeEmploye listeEmploye;
    [Parameter]
    public EventCallback OnEmployeAjoute { get; set; }

    private ProjetV3R_Employe.Data.Models.User nouvelEmploye = new ProjetV3R_Employe.Data.Models.User();
    private List<Role> roles = new List<Role>();
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await ChargerRoles();
    }

    private async Task ChargerRoles()
    {
        try
        {
            roles = await EmployeService.ObtenirRolesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Une erreur est survenue lors du chargement des rôles.";
            Console.Error.WriteLine($"Erreur dans CompAjoutEmploye - ChargerRoles: {ex.Message}");
        }
    }

    private async Task AjouterEmploye()
    {
        try
        {
            errorMessage = null;
            successMessage = null;

<<<<<<< HEAD

                if (!EstEmailValide(nouvelEmploye.Email))
                {
                    errorMessage = "L'email fourni n'est pas valide.";
                    return;
                }

                if (await EmployeService.ExisteEmailAsync(nouvelEmploye.Email))
                {
                    errorMessage = "Un employé avec cet email existe déjà.";
                    return;
                }

                if (nouvelEmploye.Email.Length > 127)
                {
                    errorMessage = "L'email ne peut pas dépasser 127 caractères.";
                    return;
                }

                // Vérification si le rôle est valide
                if (!roles.Any(r => r.IdRole == nouvelEmploye.Role))
                {
                    errorMessage = "Le rôle sélectionné n'est pas valide.";
                    return;
                }

=======
>>>>>>> parent of 3040664 (c kk mdr)
            // Si les validations de Blazor passent, tente d'ajouter l'employé
            await EmployeService.AjouterEmployeAsync(nouvelEmploye);
            successMessage = "L'employé a été ajouté avec succès.";
            await OnEmployeAjoute.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Une erreur est survenue lors de l'ajout de l'employé. Veuillez réessayer.";
            Console.Error.WriteLine($"Erreur dans CompAjoutEmploye: {ex.Message}");
        }
    }
<<<<<<< HEAD

    private bool EstEmailValide(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return false;
        }

        // Regex pour valider l'email
        string pattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        return System.Text.RegularExpressions.Regex.IsMatch(email, pattern);
    }

    private async Task RafraichirListe()
    {
        await listeEmploye.ChargerEmployes();
    }
=======
>>>>>>> parent of 3040664 (c kk mdr)
}
