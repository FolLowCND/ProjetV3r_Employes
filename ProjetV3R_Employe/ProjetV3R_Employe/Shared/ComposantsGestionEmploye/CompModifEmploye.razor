@using ProjetV3R_Employe.Data.Models
@inject EmployeService EmployeService

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@if (employe == null)
{
    <p>Chargement de la liste des employes...</p>
}
else
{
    <EditForm Model="employe" OnValidSubmit="ModifierEmploye">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="employe.Email" readonly />
        </div>

        <div class="form-group">
            <label>Rôle</label>
            <InputSelect class="form-control" @bind-Value="employe.Role">
                @if (roles != null && roles.Any())
                {
                    @foreach (var role in roles)
                    {
                        <option value="@role.IdRole">@role.NomRole</option>
                    }
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Mettre à jour</button>
    </EditForm>
}

@code {
    [Parameter]
    public User employe { get; set; } = new User();

    [Parameter]
    public EventCallback OnEmployeModifie { get; set; }

    private List<Role> roles = new List<Role>();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        roles = await EmployeService.ObtenirRolesAsync();
    }

    private async Task ModifierEmploye()
    {
        try
        {
            errorMessage = null;

            if (!roles.Any(r => r.IdRole == employe.Role))
            {
                errorMessage = "Le rôle sélectionné n'est pas valide.";
                return;
            }

            await EmployeService.ModifierEmployeAsync(employe);
            await OnEmployeModifie.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Une erreur est survenue lors de la modification.";
            Console.Error.WriteLine($"Erreur dans CompModifEmploye: {ex.Message}");
        }
    }
}
