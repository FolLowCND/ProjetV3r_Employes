@using ProjetV3R_Employe.Data.Models
@using ProjetV3R_Employe.Shared.ComposantsGestionEmploye
@inject EmployeService EmployeService

<div class="border p-3">
    <h4>Modifier l'utilisateur</h4>
    @if (isLoading)
    {
        <p>Chargement des données...</p>
    }
    else
    {
        <EditForm Model="@employe" OnValidSubmit="ModifierEmploye">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="employe.Email" class="form-control" readonly />
            </div>
            <div class="mb-3">
                <label>Rôle</label>
                <InputSelect @bind-Value="employe.Role" TValue="int" class="form-control">
                    <option value="0">-- Sélectionner un rôle --</option>
                    @foreach (var role in roles)
                    {
                        <option value="@role.IdRole">@role.NomRole</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => employe.Role)" />
            </div>
            <button type="submit" class="btn btn-primary">Modifier</button>
            <button type="button" class="btn btn-secondary" @onclick="Annuler">Annuler</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(messageErreur))
        {
            <div class="alert alert-danger mt-3">@messageErreur</div>
        }
    }
</div>

@code {
    [Parameter] public int EmployeId { get; set; } // ID de l'employé à modifier
    [Parameter] public EventCallback OnModificationTerminee { get; set; }

    private User employe = new();
    private List<Role> roles = new();
    private string? messageErreur;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Charger les rôles et l'employé
            roles = await EmployeService.ObtenirRolesAsync();
            employe = await EmployeService.ObtenirEmployeParIdAsync(EmployeId);
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur lors du chargement : {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ModifierEmploye()
    {
        try
        {
            if (employe.Role == 0)
            {
                messageErreur = "Veuillez sélectionner un rôle.";
                return;
            }

            await EmployeService.ModifierEmployeAsync(employe);
            await OnModificationTerminee.InvokeAsync();
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur lors de la modification : {ex.Message}";
        }
    }

    private void Annuler()
    {
        employe = new();
        messageErreur = null;
        OnModificationTerminee.InvokeAsync();
    }
}
