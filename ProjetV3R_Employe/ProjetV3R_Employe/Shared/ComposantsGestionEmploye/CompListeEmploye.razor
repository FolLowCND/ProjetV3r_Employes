@using ProjetV3R_Employe.Data.Models;
@using ProjetV3R_Employe.Shared.ComposantsGestionEmploye
@inject EmployeService EmployeService

<div class="mb-3">
    <button class="btn btn-secondary mb-3" @onclick="ToggleRecherche">
    <img src="/search.png" class="me-1 icon"/>
        @(afficherRecherche ? "Masquer la recherche" : "Afficher la recherche")
    </button>

    @if (afficherRecherche)
    {
        <div class="border p-3 mb-3">
            <div class="row">
                <div class="col-md-6">
                    <input type="text" @bind="searchText" class="form-control" placeholder="Rechercher par email..." />
                </div>
                <div class="col-md-4">
                    <InputSelect @bind-Value="selectedRoleId" TValue="int?" class="form-control">
                        <option value="">-- Tous les rôles --</option>
                        @foreach (var role in roles)
                        {
                            <option value="@role.IdRole">@role.NomRole</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary w-100" @onclick="FiltrerEmployes">Rechercher</button>
                </div>
            </div>
        </div>
    }
</div>

@if (employesFiltrés == null || !employesFiltrés.Any())
{
    <p>Aucun employé trouvé.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Email</th>
                <th>Rôle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employe in employesFiltrés)
            {
                <tr>
                    <td>@employe.Email</td>
                    <td>@employe.RoleNavigation.NomRole</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => OnModifier.InvokeAsync(employe.Id)">Modifier</button>
                        <button class="btn btn-danger btn-sm btn-delete" @onclick="() => ConfirmerSuppression(employe)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (employeASupprimer != null)
{
    <CompSuppEmploye Employe="employeASupprimer" AfficherModal="true" OnSuppressionTerminee="RafraichirListe" />
}
@if (!string.IsNullOrEmpty(messageErreur))
{
    <div class="alert alert-danger">@messageErreur</div>
}

@code {
    private List<User> employes = new();
    private List<User> employesFiltrés = new();
    private List<Role> roles = new();
    private string? searchText;
    private int? selectedRoleId;
    private string? messageErreur;
    private bool afficherRecherche = false;
    private User? employeASupprimer;

    [Parameter] public EventCallback<int> OnModifier { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employes = await EmployeService.ObtenirEmployesAsync();
            roles = await EmployeService.ObtenirRolesAsync();
            employesFiltrés = employes; // Initialiser les employés filtrés
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur : {ex.Message}";
        }
        await RechargerListe();
    }

    private void FiltrerEmployes()
    {
        try
        {
            employesFiltrés = employes
                .Where(e =>
                    (string.IsNullOrWhiteSpace(searchText) || e.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
                    (!selectedRoleId.HasValue || e.Role == selectedRoleId.Value))
                .ToList();
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur lors du filtrage : {ex.Message}";
        }
    }

    private void ToggleRecherche()
    {
        afficherRecherche = !afficherRecherche;
    }

    public async Task RechargerListe()
    {
        try
        {
            employes = await EmployeService.ObtenirEmployesAsync();
            StateHasChanged(); // Mettre à jour l'affichage
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur lors du rechargement des employés : {ex.Message}";
        }
    }

    private async Task RafraichirListe()
    {
        try
        {
            employeASupprimer = null;
            employes = await EmployeService.ObtenirEmployesAsync(); // Re-fetch les données depuis la base
            Console.WriteLine($"Nombre d'employés récupérés : {employes.Count}");
            StateHasChanged(); // Forcer la mise à jour de l'interface
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur lors du rafraîchissement : {ex.Message}";
        }
    }

    private async Task ChargerEmployes()
    {
        try
        {
            employes = await EmployeService.ObtenirEmployesAsync();
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur lors du rechargement des employés : {ex.Message}";
        }
    }


    private void ConfirmerSuppression(User employe)
    {
        employeASupprimer = employe;
    }

    private async Task SuppressionTerminee()
    {
        employeASupprimer = default;
        await ChargerEmployes();
    }
}
