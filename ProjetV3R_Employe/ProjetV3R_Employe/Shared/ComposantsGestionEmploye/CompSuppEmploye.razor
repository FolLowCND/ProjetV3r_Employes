@using ProjetV3R_Employe.Data.Models
@inject EmployeService EmployeService
@page "/supprimer-employe/{Id:int}"
@inject NavigationManager NavigationManager
@inject EmployeService employeService

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@if (employe != null)
{
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer cet employé ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="SupprimerEmploye">Confirmer</button>
                </div>
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public User? employe { get; set; }

    [Parameter]
    public EventCallback OnEmployeSupprime { get; set; }

    [Parameter]
    public EventCallback OnAnnulation { get; set; }

    [Parameter]
    public int Id { get; set; }

    private List<Role> roles = new List<Role>();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await employeService.SupprimerEmployeAsync(Id);
            NavigationManager.NavigateTo("/gestion-employe");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la suppression de l'employé : {ex.Message}");
        }
    }

    private async Task SupprimerEmploye()
    {
        try
        {
            errorMessage = null;

            if (employe == null)
            {
                errorMessage = "Aucun employé sélectionné pour suppression.";
                return;
            }

            await EmployeService.SupprimerEmployeAsync(employe.Id);
            await OnEmployeSupprime.InvokeAsync(); // Notifie le parent
        }
        catch (Exception ex)
        {
            errorMessage = "Une erreur est survenue lors de la suppression. Veuillez réessayer.";
            Console.Error.WriteLine($"Erreur dans CompSuppEmploye: {ex.Message}");
        }
    }

    private async Task AnnulerSuppression()
    {
        await OnAnnulation.InvokeAsync();
    }
}
