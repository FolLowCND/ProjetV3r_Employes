@using ProjetV3R_Employe.Data.Models.ProjetV3R
@inject FournisseurService FournisseurService

@if (showCurrentComponent)
{
    <!-- Button to toggle showing the two other buttons -->
    <button class="btn btn-info mb-3" @onclick="ToggleModificationButtons">
        Modifier l'information
    </button>
    <!-- These buttons will only show if the `showModificationOptions` flag is true -->
    @if (showModificationOptions)
    {
        <button class="btn btn-primary mb-3" @onclick="ShowModificationIdentification">
            Modifier l'identification
        </button>
        <button class="btn btn-primary mb-3" @onclick="ShowModificationAdresse">
            Modifier l'adresse
        </button>
    }
    @if (fournisseur == null)
    {
        <p>Aucune information sur le fournisseur.</p>
    }
    else
    {
        @if (fournisseur.EtatDemande == "En attente")
        {
            <div class="alert alert-warning" role="alert">
                <p>La demande de ce fournisseur est en attente. Que souhaitez-vous faire ?</p>
                <button class="btn btn-success me-2" @onclick="() => ModifierEtatDemande(etatApprouve)">Approuver</button>
                <button class="btn btn-danger" @onclick="() => ModifierEtatDemande(etatRejete)">Rejeter</button>
            </div>
        }

        <div class="card mb-3">
            <div class="card-header">
                <h3>Fiche Fournisseur: @fournisseur.NomEntreprise</h3>
            </div>
            <div class="card-body">
                <p><strong>NEQ:</strong> @fournisseur.Neq</p>
                <p><strong>État de la demande:</strong> @fournisseur.EtatDemande</p>
                <p><strong>Courriel d'entreprise:</strong> @fournisseur.CourrielEntreprise</p>
                <p><strong>Détails de l'entreprise:</strong> @fournisseur.DetailsEntreprise</p>
                <p><strong>Date D'inscription:</strong> @fournisseur.DateInscription</p>
                <p><strong>Site web:</strong> <i>⚠ ATTENTION, LIEN VERS L'EXTERIEUR DU SITE ⚠</i> @fournisseur.SiteWeb</p>
                <p><strong>État du compte:</strong> @(fournisseur.EtatCompte.HasValue && fournisseur.EtatCompte.Value ? "Actif" : "Inactif")</p>

                <button class="btn mb-2" style="background-color:@(fournisseur.EtatCompte == true ? "red" : "green"); color: white;"
                @onclick="ToggleEtatCompte">
                    @(fournisseur.EtatCompte == true ? "Désactiver le compte" : "Activer le compte")
                </button>
            </div>
        </div>
    }

    <button class="btn btn-secondary mb-3" @onclick="RetourListe">Retour</button>

    @if (!string.IsNullOrEmpty(messageErreur))
    {
        <div class="alert alert-danger">@messageErreur</div>
    }


}
else
{
    @if (showIdentificationComponent)
    {
        <CompModifIdentification @bind-Fournisseur="fournisseur" OnClose="ShowCurrentComponent" />
    }
    @if (showAdresseComponent)
    {
        <CompModifAdresse @bind-Fournisseur="fournisseur" OnClose="ShowCurrentComponent" />
    }
}

@code {
    [Parameter]
    public Fournisseur? fournisseur { get; set; }

    [Parameter]
    public EventCallback RetourListeCallback { get; set; }

    private const string etatApprouve = "Approuvée";
    private const string etatRejete = "Rejetée";
    private string? messageErreur;

    private bool showCurrentComponent = true;
    private bool showIdentificationComponent { get; set; } = false;
    private bool showAdresseComponent { get; set; } = false;
    private bool showModificationOptions { get; set; } = false; // Flag to control visibility of the two buttons

    private void RetourListe()
    {
        RetourListeCallback.InvokeAsync();
    }

    private async Task ToggleEtatCompte()
    {
        if (fournisseur == null || fournisseur.FournisseurId <= 0)
        {
            Console.WriteLine("Erreur : Fournisseur invalide.");
            return;
        }

        // Inverser l'état du compte
        fournisseur.EtatCompte = !(fournisseur.EtatCompte ?? false);

        try
        {
            // Mise à jour dans la base de données
            await FournisseurService.MettreAJourEtatCompteAsync(fournisseur.FournisseurId, fournisseur.EtatCompte ?? false);
            Console.WriteLine("État du compte mis à jour avec succès.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la mise à jour de l'état du compte : {ex.Message}");
        }
    }

    async Task ModifierEtatDemande(string nouvelEtat)
    {
        try
        {
            if (fournisseur != null)
            {
                fournisseur.EtatDemande = nouvelEtat;

                await FournisseurService.UpdateEtatDemandeAsync(fournisseur.FournisseurId, nouvelEtat);

                Console.WriteLine($"État de la demande mis à jour : {nouvelEtat}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la mise à jour de l'état de la demande : {ex.Message}");
            messageErreur = "Une erreur s'est produite lors de la mise à jour.";
        }
        finally
        {
            StateHasChanged();
        }
    }

    // This function toggles the visibility of the "Modifier Identification" and "Modifier Adresse" buttons
    private void ToggleModificationButtons()
    {
        showModificationOptions = !showModificationOptions;
    }

    private void ShowModificationIdentification()
    {
        showIdentificationComponent = true;
        showCurrentComponent = false;
        showModificationOptions = false; // Hide the buttons after choosing an option
    }

    private void ShowModificationAdresse()
    {
        showAdresseComponent = true;
        showCurrentComponent = false;
        showModificationOptions = false; // Hide the buttons after choosing an option
    }

    private void ShowCurrentComponent()
    {
        showIdentificationComponent = false;
        showAdresseComponent = false;
        showCurrentComponent = true;
    }
}
