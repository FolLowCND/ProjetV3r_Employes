@using ProjetV3R_Employe.Data.Models.ProjetV3R
@inject FournisseurService FournisseurService

@if (fournisseur == null)
{
    <p>Aucune information sur le fournisseur.</p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h3>Fiche Fournisseur: @fournisseur.NomEntreprise</h3>
        </div>
        <div class="card-body">
            <p><strong>NEQ:</strong> @fournisseur.Neq</p>
            <p><strong>État de la demande:</strong> @fournisseur.EtatDemande</p>
            <p><strong>Courriel d'entreprise':</strong> @fournisseur.CourrielEntreprise</p>
            <p><strong>Détails de l'entreprise:</strong> @fournisseur.DetailsEntreprise</p>
            <p><strong>Date D'inscription:</strong> @fournisseur.DateInscription</p>
            <p><strong>Site web:</strong> <i>ATTENTION, LIEN VERS L'EXTERIEUR DU SITE</i> @fournisseur.SiteWeb</p>
            <p><strong>État du compte:</strong> @(fournisseur.EtatCompte.HasValue && fournisseur.EtatCompte.Value ? "Actif" : "Inactif")</p>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(messageErreur))
{
    <div class="alert alert-danger">@messageErreur</div>
}

@code {
    [Parameter]
    public Fournisseur? fournisseur { get; set; }

    [Parameter]
    public EventCallback RetourListeCallback { get; set; }
    [Parameter]
    public int FournisseurId { get; set; }


    private string? messageErreur;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            fournisseur = await FournisseurService.ObtenirFournisseurParIdAsync(FournisseurId);
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur : {ex.Message}";
        }
    }

    private void RetourListe()
    {
        RetourListeCallback.InvokeAsync();
    }
}
