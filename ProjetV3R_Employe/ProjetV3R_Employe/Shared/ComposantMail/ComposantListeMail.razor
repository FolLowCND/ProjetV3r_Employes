@using Microsoft.EntityFrameworkCore.Metadata.Internal;
@using Microsoft.EntityFrameworkCore;
@using ProjetV3R_Employe.Data.Models;
@inject MailService EmailService

<h3>Liste des Emails</h3>

<div class="mb-3">
    <button class="btn btn-secondary mb-3" @onclick="ToggleRecherche">
        <img src="/search.png" class="me-1 icon" />
        @(afficherRecherche ? "Masquer la recherche" : "Afficher la recherche")
    </button>

    @if (afficherRecherche)
    {
        <div class="border p-3 mb-3">
            <div class="row">
                <div class="col-md-6">
                    <input type="text" @bind="searchText" class="form-control" placeholder="Rechercher par titre ou objet..." />
                </div>
                <div class="col-md-6">
                    <button class="btn btn-primary w-100" @onclick="FiltrerEmails">Rechercher</button>
                </div>
            </div>
        </div>
    }
</div>

@if (Emails == null)
{
    <p>Chargement des emails...</p>
}
else if (!Emails.Any())
{
    <p>Aucun email trouvé.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Titre</th>
                <th>Objet</th>
                <th>Corps du message</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var email in Emails)
            {
                <tr>
                    <td style="width: 25%; word-wrap: break-word;">@email.TitreEmail</td>
                    <td style="width: 25%; word-wrap: break-word;">@email.ObjetEmail</td>
                    <td style="width: 25%; word-wrap: break-word;">
                        @if (bodyVisibility.ContainsKey(email.IdEmail) && bodyVisibility[email.IdEmail])
                        {
                            <div>@email.BodyEmail</div>
                            <button class="btn btn-secondary btn-sm" @onclick="() => ToggleBodyVisibility(email.IdEmail)">Masquer</button>
                        }
                        else
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => ToggleBodyVisibility(email.IdEmail)">Afficher</button>
                        }
                    </td>
                    <td style="width: 25%; word-wrap: break-word;">
                        <button class="btn btn-warning btn-sm" @onclick="() => OnModifier.InvokeAsync(email.IdEmail)">Modifier</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteModal(email)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Dictionary<int, bool> bodyVisibility = new();
    private bool afficherRecherche = false;
    private string searchText = string.Empty;

    [Parameter] public EventCallback<Email> OnConfirmerSuppression { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public List<Email> Emails { get; set; } = new();
    private List<Email> EmailsOriginaux { get; set; } = new();
    [Parameter] public EventCallback<int> OnModifier { get; set; }

    protected override void OnParametersSet()
    {
        if (!EmailsOriginaux.Any())
        {
            EmailsOriginaux = new List<Email>(Emails);
        }

        foreach (var email in Emails)
        {
            if (!bodyVisibility.ContainsKey(email.IdEmail))
            {
                bodyVisibility[email.IdEmail] = false;
            }
        }
    }

    private void ToggleRecherche()
    {
        afficherRecherche = !afficherRecherche;
    }

    private void FiltrerEmails()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            Emails = new List<Email>(EmailsOriginaux);
        }
        else
        {
            Emails = EmailsOriginaux.Where(e =>
                (!string.IsNullOrEmpty(e.TitreEmail) && e.TitreEmail.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(e.ObjetEmail) && e.ObjetEmail.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }

        StateHasChanged();
    }

    private void ToggleBodyVisibility(int emailId)
    {
        if (bodyVisibility.ContainsKey(emailId))
        {
            bodyVisibility[emailId] = !bodyVisibility[emailId];
        }
    }

    private void ShowDeleteModal(Email email)
    {
        OnConfirmerSuppression.InvokeAsync(email);
    }
}