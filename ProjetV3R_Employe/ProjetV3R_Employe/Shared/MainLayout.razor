@inherits LayoutComponentBase
@using ProjetV3R_Employe.Data.Models
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject AuthService AuthService


    <div>
        <main>
            <header class="top-row d-flex justify-content-between align-items-center">

                <div class="user-status d-flex align-items-center">
                    @if (userName != null && userRole != null)
                    {
                        <p>Connecté en tant que : @userName (@userRole)</p>
                        <button class="btn btn-danger" @onclick="Logout">Déconnexion</button>
                        <button class="btn bell-button" @onclick="navigateToCompInscription" style="background: none; border: none; padding: 0; cursor: pointer;">
                            <img src="bell.svg" alt="Bell Icon"
                                 style="width: 24px;
                                height: 24px;
                                display: flex;
                                justify-content:
                                flex-end;
                                align-items: center;
                                padding: 0;
                                cursor: pointer;
                                position: absolute;
                                top: 15px;
                                right: 25px;" />
                        </button>
                    }
                    else
                    {
                        <p class="mb-0">Non connecté</p>

                    <div class="btn-row">
                        <div class="btn-container">
                            <button class="btn bell-button" @onclick="navigateToCompInscription">
                                <img src="bell.svg" alt="Bell Icon" class="bell-icon" />
                            </button>
                            <span class="bell-text">Nouvelles demandes</span>
                        </div>

                        <div class="btn-container">
                            <button class="btn bell-button" @onclick="navigateToCompCourriel">
                                <img src="gestionMail-ico.png" alt="Mail Icon" class="bell-icon" />
                            </button>
                            <span class="bell-text">Gestion mails</span>
                        </div>

                        <div class="btn-container">
                            <button class="btn bell-button" @onclick="navigateToCompEmploye">
                                <img src="rechercheEmp-ico.png" alt="Employe Icon" class="bell-icon" />
                            </button>
                            <span class="bell-text">Gestion employés</span>
                        </div>

                        <div class="btn-container">
                            <button class="btn bell-button" @onclick="navigateToCompFournisseur">
                                <img src="rechercheFournisseur-ico.png" alt="Fournisseur Icon" class="bell-icon" />
                            </button>
                            <span class="bell-text">Recherche fournisseur</span>
                        </div>

                        <div class="btn-container">
                            <button class="btn bell-button" @onclick="navigateToCompProduit">
                                <img src="rechercheProduit-ico.png" alt="Produits Icon" class="bell-icon" />
                            </button>
                            <span class="bell-text">Recherche produits</span>
                        </div>
                    </div>


                    }
                </div>
            </header>

             <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

@code {
    private string? userName;
    private string? userRole;

    protected override async Task OnInitializedAsync()
    {
        await UpdateUserState();
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task UpdateUserState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
            userRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
        }
        else
        {
            userName = null;
            userRole = null;
        }
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserState();
    }

    private async Task Logout()
    {
        await AuthService.SignOutAsync();
        Navigation.NavigateTo("/");
    }


    private void navigateToCompInscription()
    {
        Navigation.NavigateTo("/inscription-fournisseurs");
    }

    private void navigateToCompFournisseur()
    {
        Navigation.NavigateTo("/gestion-fournisseurs");
    }

        private void navigateToCompEmploye()
    {
        Navigation.NavigateTo("/gestion-employes");
    }

    private void navigateToCompProduit()
    {
        Navigation.NavigateTo("/recherche-produits");
    }

    private void navigateToCompCourriel()
    {
        Navigation.NavigateTo("/modeles-courriels");
    }


    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

}