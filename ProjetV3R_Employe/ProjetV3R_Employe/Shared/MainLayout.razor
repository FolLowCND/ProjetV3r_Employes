@inherits LayoutComponentBase
@using ProjetV3R_Employe.Data.Models
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject AuthService AuthService


    <div>
        <main>
            <header class="top-row d-flex justify-content-between align-items-center">

                <div class="user-status d-flex align-items-center">
                    @if (userName != null && userRole != null)
                    {
                        <p>Connecté en tant que : @userName (@userRole)</p>
                        <button class="btn btn-danger" @onclick="Logout">Déconnexion</button>
                    }
                    else
                    {
                        <p class="mb-0">Non connecté</p>
                    }
                </div>
            </header>

             <article class="content px-4">
                @Body
            </article>
        </main>
    </div>

@code {
    private string? userName;
    private string? userRole;

    protected override async Task OnInitializedAsync()
    {
        await UpdateUserState();
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task UpdateUserState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
            userRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
        }
        else
        {
            userName = null;
            userRole = null;
        }
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserState();
    }

    private async Task Logout()
    {
        await AuthService.SignOutAsync();
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
