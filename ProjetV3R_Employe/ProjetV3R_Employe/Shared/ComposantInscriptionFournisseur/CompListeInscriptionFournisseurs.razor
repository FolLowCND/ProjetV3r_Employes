@using ProjetV3R_Employe.Data.Models.ProjetV3R
@using ProjetV3R_Employe.Shared.ComposantsGestionFournisseurs
@inject FournisseurService FournisseurService
@inject NavigationManager Navigation

@if (fournisseurSelectionne == null)
{
    <div class="mb-3">
        <button class="btn btn-secondary mb-3" @onclick="ToggleRecherche">
            @(afficherRecherche ? "Masquer la recherche" : "Afficher la recherche")
        </button>

        @if (afficherRecherche)
        {
            <div class="border p-3 mb-3">
                <div class="row">
                    <div class="col-md-6">
                        <input type="text" @bind="searchNomEntreprise" class="form-control" placeholder="Rechercher par nom d'entreprise..." />
                    </div>
                    <div class="col-md-6 mt-3">
                        <button class="btn btn-primary w-100" @onclick="FiltrerFournisseurs">Rechercher</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (fournisseursFiltres == null || !fournisseursFiltres.Any())
{
    <p>Aucun fournisseur en attente trouvé.</p>
}
else
{
    @if (fournisseurSelectionne == null)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nom de l'entreprise</th>
                    <th>NEQ</th>
                    <th>État de la demande</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var fournisseur in fournisseursFiltres)
                {
                    <tr>
                        <td>@fournisseur.NomEntreprise</td>
                        <td>@fournisseur.Neq</td>
                        <td>@fournisseur.EtatDemande</td>
                        <td>
                            <button class="btn btn-info" @onclick="() => VoirFicheFournisseur(fournisseur)">Voir Fiche</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <CompPageFournisseur fournisseur="fournisseurSelectionne" RetourListeCallback="RetourListe" />
    }
}

@if (!string.IsNullOrEmpty(messageErreur))
{
    <div class="alert alert-danger">@messageErreur</div>
}

@code {
    private List<Fournisseur> fournisseurs = new();
    private List<Fournisseur> fournisseursFiltres = new();
    private string? searchNomEntreprise;
    private string? messageErreur;
    private bool afficherRecherche = false;
    private Fournisseur? fournisseurSelectionne;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            fournisseurs = await FournisseurService.ObtenirFournisseursAsync();

            Console.WriteLine("Liste des fournisseurs récupérés:");
            foreach (var f in fournisseurs)
            {
                Console.WriteLine($"Nom: {f.NomEntreprise}, Etat: {f.EtatDemande}");
            }

            fournisseursFiltres = fournisseurs
                .Where(f => f.EtatDemande?.Trim().ToLower() == "en attente")
                .ToList();
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur : {ex.Message}";
        }
    }

    private void FiltrerFournisseurs()
    {
        try
        {
            Console.WriteLine($"Recherche avec NomEntreprise: {searchNomEntreprise}");

            fournisseursFiltres = fournisseurs
                .Where(f =>
                    f.EtatDemande?.Trim().ToLower() == "en attente" &&
                    (string.IsNullOrWhiteSpace(searchNomEntreprise) ||
                     f.NomEntreprise?.Contains(searchNomEntreprise, StringComparison.OrdinalIgnoreCase) == true))
                .ToList();

            Console.WriteLine($"Nombre de résultats après filtrage: {fournisseursFiltres.Count}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur lors du filtrage : {ex.Message}";
        }
    }

    private void ToggleRecherche()
    {
        afficherRecherche = !afficherRecherche;
    }

    private void VoirFicheFournisseur(Fournisseur fournisseur)
    {
        fournisseurSelectionne = fournisseur;
        StateHasChanged();
    }

    private void RetourListe()
    {
        fournisseurSelectionne = null;
    }
}
