@using ProjetV3R_Employe.Data.Models.ProjetV3R
@using ProjetV3R_Employe.Shared.ComposantsGestionFournisseurs
@inject ProduitsServicesService PSService

<div class="container-fluid employe-container">
    @if (fournisseurSelectionne == null)
    {
        <div class="mb-3">
            <button class="btn btn-secondary mb-3" @onclick="ToggleRecherche">
                @(afficherRecherche ? "Masquer la recherche" : "Afficher la recherche")
            </button>
            @if (afficherRecherche)
            {
                <div class="border p-3 mb-3">
                    <div class="row">
                        <div class="col-md-4">
                            <input type="text" @bind="searchCommodite" class="form-control" placeholder="Rechercher par commodité..." />
                        </div>
                        <div class="col-md-4">
                            <input type="text" @bind="searchClasse" class="form-control" placeholder="Rechercher par classe..." />
                        </div>
                        <div class="col-md-4">
                            <input type="text" @bind="searchFamille" class="form-control" placeholder="Rechercher par famille..." />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-4">
                            <input type="text" @bind="searchSegment" class="form-control" placeholder="Rechercher par segment..." />
                        </div>
                    </div>
                    <hr>
                    <div class="row mt-3">
                        <div class="col-md-4">
                            <InputSelect @bind-Value="etatDemandeSelectionne" class="form-control">
                                <option value="" selected>-- Tous les états de demande --</option>
                                <option value="Approuvée">Approuvée</option>
                                <option value="En attente">En attente</option>
                                <option value="Rejetée">Rejetée</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-6">
                            <InputSelect @bind-Value="etatCompteSelectionne" TValue="bool?" class="form-control">
                                <option value="">-- Tous les comptes --</option>
                                <option value="true">Actif</option>
                                <option value="false">Inactif</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-6 mt-3">
                            <button class="btn btn-primary w-100" @onclick="FiltrerProduits">Rechercher</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (produitsFiltres == null || !produitsFiltres.Any())
        {
            <p>Aucun produit trouvé.</p>
        }
        else
        {
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>
                            <input type="checkbox" @bind="selectAll" @onclick="ToggleSelectAll" />
                        </th>
                        <th>Fournisseur</th>
                        <th>Commodité</th>
                        <th>Classe</th>
                        <th>Famille</th>
                        <th>Segment</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var produit in produitsFiltres)
                    {
                        <tr>
                            <td>
                                <input type="checkbox"
                           @bind="selectedProductIds[produit.ProduitId]"
                           @onclick="() => ToggleIndividualCheckbox(produit.ProduitId)" />
                            </td>
                            <td>@produit.FournisseurNom</td>
                            <td>@produit.CommoditeTitreFr</td>
                            <td>@produit.ClasseTitreFr</td>
                            <td>@produit.FamilleTitreFr</td>
                            <td>@produit.SegmentTitreFr</td>
                            <td>
                                <button class="btn btn-info" @onclick="() => VoirFournisseur(produit.Fournisseur)">Voir Fiche</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <button class="btn btn-primary" @onclick="LogSelectedProductsToConsole">Log Selected Products</button>
        }
    }
    else
    {
        <CompPageFournisseur fournisseur="fournisseurSelectionne" RetourListeCallback="RetourListe" />
    }
</div>

@code {
    private List<ProduitDto> Produits = new();
    private List<ProduitDto> produitsFiltres = new();
    private Fournisseur? fournisseurSelectionne;
    private string? searchCommodite;
    private string? searchClasse;
    private string? searchFamille;
    private string? searchSegment;
    private string? messageErreur;
    private bool afficherRecherche = false;
    private ProduitDto? produitSelectionne;

    private string? etatDemandeSelectionne;
    private bool? etatCompteSelectionne = null;

    private bool selectAll = false;
    private Dictionary<int, bool> selectedProductIds = new();

    private void ToggleSelectAll()
    {
        selectAll = !selectAll;
        foreach (var produit in produitsFiltres)
        {
            selectedProductIds[produit.ProduitId] = selectAll;
        }
    }

    private void UpdateSelectAllState()
    {
        selectAll = produitsFiltres.All(p => selectedProductIds.ContainsKey(p.ProduitId) && selectedProductIds[p.ProduitId]);
    }

    private void ToggleIndividualCheckbox(int productId)
    {
        selectedProductIds[productId] = !selectedProductIds[productId];
        UpdateSelectAllState();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Produits = await PSService.GetProduitsAsync();
            produitsFiltres = Produits;

            foreach (var produit in produitsFiltres)
            {
                selectedProductIds[produit.ProduitId] = false;
            }
        }
        catch (Exception ex)
        {
            messageErreur = $"Erreur : {ex.Message}";
        }
    }

    @code {
        private void FiltrerProduits()
        {
            try
            {
                var selectedIdsBeforeFiltering = selectedProductIds
                    .Where(kv => kv.Value)
                    .Select(kv => kv.Key)
                    .ToList();

                produitsFiltres = Produits
                    .Where(p =>
                        (string.IsNullOrWhiteSpace(searchCommodite) || (p.CommoditeTitreFr?.Contains(searchCommodite, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                        (string.IsNullOrWhiteSpace(searchClasse) || (p.ClasseTitreFr?.Contains(searchClasse, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                        (string.IsNullOrWhiteSpace(searchFamille) || (p.FamilleTitreFr?.Contains(searchFamille, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                        (string.IsNullOrWhiteSpace(searchSegment) || (p.SegmentTitreFr?.Contains(searchSegment, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                        (string.IsNullOrWhiteSpace(etatDemandeSelectionne) || (p.Fournisseur?.EtatDemande?.Equals(etatDemandeSelectionne, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                        (!etatCompteSelectionne.HasValue || (p.Fournisseur?.EtatCompte == etatCompteSelectionne.Value)))
                    .ToList();

                var filteredIds = produitsFiltres.Select(p => p.ProduitId).ToHashSet();
                foreach (var productId in selectedProductIds.Keys.ToList())
                {
                    if (!filteredIds.Contains(productId))
                    {
                        selectedProductIds[productId] = false;
                    }
                }

                foreach (var productId in selectedIdsBeforeFiltering)
                {
                    if (filteredIds.Contains(productId))
                    {
                        selectedProductIds[productId] = true;
                    }
                }

                UpdateSelectAllState();
            }
            catch (Exception ex)
            {
                messageErreur = $"Erreur lors du filtrage : {ex.Message}";
            }
        }
    }


    private void LogSelectedProductsToConsole()
    {
        var selectedProductIdsList = selectedProductIds
            .Where(kv => kv.Value)
            .Select(kv => kv.Key)
            .ToList();

        Console.WriteLine("Selected Product IDs:");
        foreach (var productId in selectedProductIdsList)
        {
            Console.WriteLine(productId);
        }
    }

    private void VoirFournisseur(Fournisseur fournisseur)
    {
        fournisseurSelectionne = fournisseur;
    }

    private void RetourListe()
    {
        fournisseurSelectionne = null;
    }

    private void ToggleRecherche()
    {
        afficherRecherche = !afficherRecherche;
    }
}
